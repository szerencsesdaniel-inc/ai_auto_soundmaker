"""
AutoSound - Batch Mode
T√∂bb forgat√≥k√∂nyv f√°jl automatikus feldolgoz√°sa
"""

import os
from dotenv import load_dotenv
from batch_processor import BatchProcessor


def print_banner():
    """Ki√≠rja a program banner√©t."""
    print("\n" + "="*60)
    print("üéµ AutoSound - BATCH MODE")
    print("   T√∂bb forgat√≥k√∂nyv automatikus feldolgoz√°sa")
    print("="*60 + "\n")


def print_summary(batch_result: dict):
    """Ki√≠rja a batch feldolgoz√°s √∂sszefoglal√≥j√°t."""
    if not batch_result.get('success'):
        return
    
    print("\n" + "="*60)
    print("‚úÖ BATCH FELDOLGOZ√ÅS BEFEJEZVE!")
    print("="*60)
    print(f"üìÑ √ñsszes f√°jl: {batch_result['total_files']}")
    print(f"‚úÖ Sikeres: {batch_result['processed']}")
    print(f"‚ùå Sikertelen: {batch_result['failed']}")
    
    if batch_result['failed'] > 0:
        print(f"\n‚ö†Ô∏è  Sikertelen f√°jlok:")
        for result in batch_result['results']:
            if not result['success']:
                print(f"   ‚Ä¢ {result['name']}: {result['error']}")
    
    print(f"\nüìä √ñsszes√≠t≈ë jelent√©s: batch_output/batch_summary.json")
    print("="*60 + "\n")
    
    # R√©szletes statisztik√°k
    total_dialogues = sum(r['dialogues_count'] for r in batch_result['results'])
    total_generated = sum(r['generated_count'] for r in batch_result['results'])
    
    print("üìà Statisztik√°k:")
    print(f"   üí¨ √ñsszes p√°rbesz√©d: {total_dialogues}")
    print(f"   üéµ Gener√°lt hangf√°jlok: {total_generated}")
    print(f"   üìÅ Output mapp√°k:")
    
    for result in batch_result['results']:
        if result['success']:
            print(f"      ‚Ä¢ {result['name']}/  ({result['generated_count']} f√°jl)")
    
    print()


def main():
    """F≈ë program fut√°si logika."""
    
    print_banner()
    
    # 1. API kulcs bet√∂lt√©se
    load_dotenv()
    api_key = os.getenv('ELEVENLABS_API_KEY')
    
    if not api_key:
        print("‚ùå Hiba: ELEVENLABS_API_KEY nincs be√°ll√≠tva!")
        print("   Ellen≈ërizd a .env f√°jlt.")
        return
    
    # 2. Input mappa bek√©r√©se
    print("üìÇ BATCH FELDOLGOZ√ÅS BE√ÅLL√çT√ÅSOK\n")
    
    input_dir = input("Input mappa el√©r√©si √∫tja (ahol a .docx/.txt f√°jlok vannak): ").strip()
    
    if not input_dir:
        print("‚ùå Hiba: Input mappa megad√°sa k√∂telez≈ë!")
        return
    
    if not os.path.exists(input_dir):
        print(f"‚ùå Hiba: A mappa nem tal√°lhat√≥: {input_dir}")
        return
    
    # 3. Output mappa bek√©r√©se (opcion√°lis)
    output_dir = input("Output alap mappa (Enter = 'batch_output'): ").strip()
    if not output_dir:
        output_dir = "batch_output"
    
    # 4. Egyedi hang mappingek (opcion√°lis)
    print("\nüí° Tipp: Ha szeretn√©l egyedi hang-p√°ros√≠t√°sokat megadni,")
    print("   szerkeszd a voice_manager.py f√°jlt a futtat√°s el≈ëtt.\n")
    
    custom_mappings = {}
    # P√©lda egyedi mappingekre:
    # custom_mappings = {
    #     'Lisa': 'young_female_friendly',
    #     'Teacher': 'female_professional'
    # }
    
    # 5. Batch processor l√©trehoz√°sa √©s futtat√°sa
    processor = BatchProcessor(
        input_dir=input_dir,
        output_base_dir=output_dir,
        api_key=api_key
    )
    
    # √ñsszes f√°jl feldolgoz√°sa
    batch_result = processor.process_all(custom_mappings)
    
    # 6. √ñsszefoglal√≥ ki√≠r√°sa
    if batch_result.get('success'):
        print_summary(batch_result)
    elif batch_result.get('cancelled'):
        print("\n‚ö†Ô∏è  Feldolgoz√°s megszak√≠tva a felhaszn√°l√≥ √°ltal.\n")
    else:
        print(f"\n‚ùå Hiba a batch feldolgoz√°s sor√°n: {batch_result.get('error')}\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Megszak√≠tva (Ctrl+C)\n")
    except Exception as e:
        print(f"\n‚ùå V√°ratlan hiba: {e}\n")
