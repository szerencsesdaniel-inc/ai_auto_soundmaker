"""
Hangprofil kezel≈ë modul
Feladata: Szerepl≈ëkh√∂z hozz√°rendelni a megfelel≈ë ElevenLabs hangprofilokat.
"""

from typing import Dict, Optional


class VoiceManager:
    """
    Hangprofil menedzser oszt√°ly.
    Szerepl≈ëkh√∂z rendeli a megfelel≈ë ElevenLabs voice ID-kat.
    """
    
    # El≈ëre defini√°lt ElevenLabs voice ID-k - BRITISH ENGLISH üá¨üáß
    # Csak brit angol hangok a helyes kiejt√©shez!
    # A teljes hanglista: https://elevenlabs.io/voice-library
    
    VOICE_PROFILES = {
        # N≈ëi brit hangok üá¨üáß
        'young_female_friendly': 'pFZP5JQG7iQjIQuC4Bku',      # Lily - British, young, warm
        'young_female_neutral': 'XrExE9yKIg1WjnnlVkGX',       # Matilda - British, young, pleasant
        'elderly_female_cheerful': 'XB0fDUnXU5powFXDhCwa',    # Charlotte - British, middle-aged, warm
        'female_professional': 'z9fAnlkpzviPz146aGWa',        # Serena - British, clear, professional
        
        # F√©rfi brit hangok üá¨üáß
        'male_young': 'N2lVS1w4EtoT3dr4eOWO',                 # Callum - British, young, neutral
        'male_elderly': 'iP95p4xoKVk53GoZ742B',               # Chris - British, mature, engaging
        'male_professional': 'JBFqnCBsd6RMkjVDRZzb',          # George - British, professional, clear
        
        # Alap√©rtelmezett - brit n≈ëi hang
        'default': 'pFZP5JQG7iQjIQuC4Bku'                     # Lily - British default
    }
    
    def __init__(self, custom_mappings: Optional[Dict[str, str]] = None):
        """
        Inicializ√°lja a voice managert.
        
        Args:
            custom_mappings: Egyedi szerepl≈ë -> voice_profile p√°ros√≠t√°sok
        """
        self.custom_mappings = custom_mappings or {}
        self.character_voice_map = {}
    
    def assign_voice_by_description(self, character: str, description: str) -> str:
        """
        Automatikusan hozz√°rendel egy hangprofilt a le√≠r√°s alapj√°n.
        
        Args:
            character: Szerepl≈ë neve
            description: Szerepl≈ë le√≠r√°sa (pl. "friendly and polite")
            
        Returns:
            str: ElevenLabs voice ID
        """
        # Ha van egyedi mapping, azt haszn√°ljuk
        if character in self.custom_mappings:
            profile = self.custom_mappings[character]
            voice_id = self.VOICE_PROFILES.get(profile, self.VOICE_PROFILES['default'])
            self.character_voice_map[character] = voice_id
            return voice_id
        
        # N√âV alap√∫ nem-felismer√©s (ha nincs le√≠r√°s)
        character_lower = character.lower()
        
        # Tipikus f√©rfi nevek
        male_names = [
            'tom', 'jake', 'mark', 'john', 'james', 'robert', 'michael', 'david',
            'william', 'daniel', 'matthew', 'chris', 'paul', 'peter', 'andrew',
            'manager', 'waiter', 'clerk', 'man', 'boy', 'father', 'brother', 'mr',
            'callum', 'george', 'jack', 'ben', 'joe', 'steve', 'kevin',
            'doctor', 'receptionist'  # Gyakran f√©rfi szerepek
        ]
        
        # Tipikus n≈ëi nevek
        female_names = [
            'lisa', 'sarah', 'emma', 'emily', 'julia', 'mia', 'claire', 'anna',
            'maria', 'laura', 'jane', 'kate', 'lucy', 'sophie', 'olivia', 'rachel',
            'seller', 'waitress', 'woman', 'lady', 'girl', 'mother', 'sister', 'mrs',
            'lily', 'matilda', 'charlotte', 'serena', 'jessica', 'amy', 'hannah'
        ]
        
        # Unisex nevek - kontextus alapj√°n d√∂nt√ºnk
        unisex_names = ['alex', 'sam', 'charlie', 'taylor', 'jordan', 'casey']
        
        # N√©v alap√∫ felismer√©s
        is_male_name = character_lower in male_names
        is_female_name = character_lower in female_names
        is_unisex_name = character_lower in unisex_names
        
        # Automatikus felismer√©s kulcsszavak alapj√°n (le√≠r√°sb√≥l)
        description_lower = description.lower() if description else ""
        
        # Kor szerinti felismer√©s
        is_young = any(word in description_lower for word in ['young', 'teenager', 'student', 'child'])
        is_elderly = any(word in description_lower for word in ['elderly', 'old', 'senior', 'grandmother', 'grandfather'])
        
        # Nem szerinti felismer√©s (le√≠r√°sb√≥l)
        is_female = any(word in description_lower for word in ['lady', 'woman', 'girl', 'female', 'mother', 'sister'])
        is_male = any(word in description_lower for word in ['man', 'boy', 'male', 'father', 'brother'])
        
        # Hangulat
        is_cheerful = any(word in description_lower for word in ['cheerful', 'happy', 'jovial', 'upbeat'])
        is_friendly = any(word in description_lower for word in ['friendly', 'polite', 'kind', 'helpful'])
        is_professional = any(word in description_lower for word in ['professional', 'formal', 'business'])
        
        # JAV√çTOTT LOGIKA: N√©v priorit√°s, azt√°n le√≠r√°s
        
        # 1. Ha a N√âV egy√©rtelm≈±en f√©rfi
        if is_male_name or is_male:
            if is_elderly:
                profile = 'male_elderly'
            elif is_young:
                profile = 'male_young'
            elif is_professional:
                profile = 'male_professional'
            else:
                profile = 'male_young'  # Alap√©rtelmezett f√©rfi hang
        
        # 2. Ha a N√âV egy√©rtelm≈±en n≈ëi
        elif is_female_name or is_female:
            if is_elderly and is_cheerful:
                profile = 'elderly_female_cheerful'
            elif is_young and is_friendly:
                profile = 'young_female_friendly'
            elif is_professional:
                profile = 'female_professional'
            else:
                profile = 'young_female_neutral'
        
        # 3. Unisex n√©v - le√≠r√°s alapj√°n d√∂nt√ºnk
        elif is_unisex_name:
            if is_male or 'he' in description_lower or 'his' in description_lower:
                profile = 'male_young'
            elif is_female or 'she' in description_lower or 'her' in description_lower:
                profile = 'young_female_neutral'
            else:
                # V√©gz≈ëd√©s alapj√°n pr√≥b√°lkozunk
                if character_lower.endswith('a'):
                    profile = 'young_female_neutral'
                else:
                    profile = 'male_young'
        
        # 4. Alap√©rtelmezett (ha sem n√©v, sem le√≠r√°s nem seg√≠t)
        else:
            # Pr√≥b√°lkoz√°s: ha a n√©v 'a'-ra, 'ia'-ra stb. v√©gz≈ëdik ‚Üí n≈ëi
            if character_lower.endswith(('a', 'ia', 'ella', 'ette', 'ine', 'ie')):
                profile = 'young_female_neutral'
            else:
                profile = 'male_young'  # Alap√©rt. ink√°bb f√©rfi mint n≈ëi
        
        voice_id = self.VOICE_PROFILES[profile]
        self.character_voice_map[character] = voice_id
        
        return voice_id
    
    def get_voice_id(self, character: str) -> str:
        """
        Visszaadja a szerepl≈ëh√∂z tartoz√≥ voice ID-t.
        
        Args:
            character: Szerepl≈ë neve
            
        Returns:
            str: ElevenLabs voice ID
        """
        return self.character_voice_map.get(character, self.VOICE_PROFILES['default'])
    
    def get_all_mappings(self) -> Dict[str, str]:
        """Visszaadja az √∂sszes szerepl≈ë -> voice ID p√°ros√≠t√°st."""
        return self.character_voice_map.copy()
